basic_model_fit <- inla(base_formula, data = ohio_df, family = "poisson",
E = pop_at_risk,
control.compute = list(config = TRUE, # To see constraints later
cpo = T,   # For model selection
waic = T), # For model selection
)
time_base = Sys.time()-ptm
print(c("- sum(log(CPO)):", toString(round(-sum(log(basic_model_fit$cpo$cpo)), digits = 4))))
#See a lot of things
plot(basic_model_fit)
#See temporal effect
matplot(basic_model_fit$summary.random$year[22:42, 4:6],
lty=c(2,1,2), type="l", col=1)
#See fitted values for each county w. median, and 0.025%- and 0.975% quantiles
#along with actual values of rate as points
every_county_time_series(basic_model_fit)
#Update base formula to also contain iid interaction
typeI_formula <- update(base_formula,  ~. + f(space_time_unstructured,
model="iid", #Has to be iid, whole point
hyper = interaction_hyper ))
ptm <- Sys.time()
typeI_fit <- inla(typeI_formula, data = ohio_df, family = 'poisson',
E = pop_at_risk, control.compute = list(config = TRUE,
cpo = TRUE,
waic = TRUE))
time_typeI = Sys.time() - ptm
print(c("- sum(log(CPO)):", toString(round(-sum(log(typeI_fit$cpo$cpo)), digits = 4))))
#Get sum-to-zero constraints for type II interaction
typeII_constraints = constraints_maker(type = "II", n = n, t = T)
#Scale precision matrix of RW model so the geometric mean of the marginal variances is one
scaled_RW_prec <- inla.scale.model(RW1_prec,
list(A = matrix(1, 1, dim(RW1_prec)[1]),
e = 0))
#Get precision matric for type II interaction by Kronecker product
typeII_prec <- scaled_RW_prec %x% diag(n)
typeII_formula <- update(base_formula, ~. + f(space_time_unstructured,
model = "generic0",
Cmatrix = typeII_prec,
extraconstr = typeII_constraints,
rankdef = n,
hyper = interaction_hyper))
ptm <- Sys.time()
typeII_fit <- inla(typeII_formula, data = ohio_df, family = "poisson",
E = pop_at_risk, control.compute = list(config = TRUE,
cpo = TRUE,
waic = TRUE))
time_typeII = Sys.time() - ptm
print(c("- sum(log(CPO)):", toString(round(-sum(log(typeII_fit$cpo$cpo)), digits = 4))))
#Get constraints for the type III interactions
typeIII_constraints <- constraints_maker(type = "III", n = n, t = T)
# get scaled ICAR
scaled_ICAR_prec <- INLA::inla.scale.model(ICAR_prec,
constr = list(A = matrix(1,1,dim(ICAR_prec)[1]), e = 0))
# Kronecker product between IID x ICAR
typeIII_prec <- diag(T) %x% scaled_ICAR_prec
typeIII_formula <- update(base_formula, ~. + f(space_time_unstructured,
model = "generic0",
Cmatrix = typeIII_prec,
extraconstr = typeIII_constraints,
rankdef = T,
hyper = interaction_hyper))
ptm <- Sys.time()
typeIII_fit <- inla(typeIII_formula, data = ohio_df, family = "poisson",
E = pop_at_risk, control.compute = list(config = TRUE,
cpo = TRUE,
waic = TRUE))
#Get constraints for the type III interactions
typeIII_constraints <- constraints_maker(type = "III", n = n, t = T)
# get scaled ICAR
scaled_ICAR_prec <- INLA::inla.scale.model(ICAR_prec,
constr = list(A = matrix(1,1,dim(ICAR_prec)[1]), e = 0))
# Kronecker product between IID x ICAR
typeIII_prec <- diag(T) %x% scaled_ICAR_prec
typeIII_formula <- update(base_formula, ~. + f(space_time_unstructured,
model = "generic0",
Cmatrix = typeIII_prec,
extraconstr = typeIII_constraints,
rankdef = T,
hyper = interaction_hyper))
ptm <- Sys.time()
typeIII_fit <- inla(typeIII_formula, data = ohio_df, family = "poisson",
E = pop_at_risk, control.compute = list(config = TRUE,
cpo = TRUE,
waic = TRUE))
time_typeIII = Sys.time() - ptm
print(c("- sum(log(CPO)):", toString(round(-sum(log(typeIII_fit$cpo$cpo)), digits = 4))))
#Get constraints for type IV interactions
typeIV_constraints <- constraints_maker(type = "IV", n = n, t = T)
#Get type IV interaction precision matrix
typeIV_prec <- scaled_RW_prec %x% scaled_ICAR_prec
#Get formula for type IV
typeIV_formula <- update(base_formula, ~. + f(space_time_unstructured,
model = "generic0",
Cmatrix = typeIV_prec,
extraconstr = typeIV_constraints,
rankdef = (n + T - 1),
hyper = interaction_hyper))
ptm <- Sys.time()
typeIV_fit <- inla(typeIV_formula, data = ohio_df, family = "poisson",
E = pop_at_risk, control.compute = list(config = TRUE,
cpo = TRUE,
waic = TRUE))
print(c("- sum(log(CPO)):", toString(round(-sum(log(basic_model_fit$cpo$cpo)), digits = 4))))
basic_model_fit$waic$waic
print(c("WAIC: ", toString(round(-sum(log(basic_model_fit$waic$waic)), digits = 4))))
print(c("WAIC: ", toString(round(basic_model_fit$waic$waic, digits = 4))))
print(c('comp. time: ', time_base))
print(c("- sum(log(CPO)):", toString(round(-sum(log(typeI_fit$cpo$cpo)), digits = 4))))
print(c("WAIC: ", toString(round(typeI_fit$waic$waic, digits = 4))))
print(c('comp. time: ', time_typeI))
print(c("- sum(log(CPO)):", toString(round(-sum(log(typeII_fit$cpo$cpo)), digits = 4))))
print(c("WAIC: ", toString(round(typeII_fit$waic$waic, digits = 4))))
print(c('comp. time: ', time_typeII))
print(c("- sum(log(CPO)):", toString(round(-sum(log(typeIII_fit$cpo$cpo)), digits = 4))))
print(c("WAIC: ", toString(round(typeIII_fit$waic$waic, digits = 4))))
print(c('comp. time: ', time_typeIII))
#Clear environment
rm(list = ls())
#Load necessary libraries
library(INLA)
library(tidyverse)
library(spData)
library(sf)
library(spdep)
library(ggplot2)
library(ggspatial)
library(gridExtra)
library(ggpubr)
#Set working directory
if(getwd() != "C:/Users/joste/Documents/H2023/Code/Prosjektoppgave"){
setwd("H2023/Code/Prosjektoppgave/")
}
source("utilities.R")
install.packages(tidyverse)
#Clear environment
rm(list = ls())
#Load necessary libraries
library(INLA)
library(tidyverse)
library(spData)
library(sf)
library(spdep)
library(ggplot2)
library(ggspatial)
library(gridExtra)
library(ggpubr)
#Set working directory
if(getwd() != "C:/Users/joste/Documents/H2023/Code/Prosjektoppgave"){
setwd("H2023/Code/Prosjektoppgave/")
}
source("utilities.R")
#Load data
ohio_df <- read.csv("ohio_df.csv")
#read the shapefile of ohio
ohio_map  <- read_sf('./fe_2007_39_county')[ ,c("geometry", "NAME")]
ohio_map <- ohio_map[order(ohio_map$NAME), ]
#Get number of counties (n) and number of years (T)
n <- length(unique(ohio_df$county))   # Number of areas
T <- length(unique(ohio_df$year))     # Number of time points
#Get precision matricies for RW1 and RW2
RW1_prec <- INLA:::inla.rw(n = T, order = 1,
scale.model = FALSE, # set scale.model  = F because we'll scale in the formula
sparse = TRUE)
RW2_prec <- INLA:::inla.rw(n = T, order = 2,
scale.model = FALSE,
sparse = TRUE)
#Extract adjacency structure and create precision matrix for ICAR
nb <- spdep::poly2nb(ohio_map, queen = FALSE)
matrix4inla <- nb2mat(nb, style="B")
mydiag = rowSums(matrix4inla)
matrix4inla <- -matrix4inla
diag(matrix4inla) <- mydiag
ICAR_prec <- Matrix(matrix4inla, sparse = TRUE) #Make it sparse
#Specify hyperparameters with corresponding priors
#Temporal hyperparameters (Precision of iid and precision of RW1) w. corresponding priors: penalized constraint
temporal_hyper = list(prec.unstruct = list(prior = 'pc.prec',
param = c(1, 0.01)), #Magic numbers
prec.spatial = list(prior = 'pc.prec',
param = c(1, 0.01)) #Magic numbers
)
#Spatial hyperparameters (Precision of iid and precision of ICAR) w. corresponding priors: penalized constraint
spatial_hyper = list(prec.unstruct = list(prior = 'pc.prec',
param = c(1, 0.01)), #Magic numbers
prec.spatial = list(prior = 'pc.prec',
param = c(1, 0.01)) #Magic numbers
)
#Interaction hyperparameter and prior (Precision of interaction)
interaction_hyper = list(theta=list(prior="pc.prec",
param=c(1,0.01)))
#Make the base formula
base_formula <- deaths ~ 1 + f(year,
model = 'bym',
scale.model = T,
constr = T,
rankdef = 1,
graph = RW1_prec,
hyper = temporal_hyper) +
f(county,
model = 'bym',
scale.model = T,
constr = T,
rankdef = 1,
graph = ICAR_prec,
hyper = spatial_hyper)
ptm <- Sys.time()
basic_model_fit <- inla(base_formula, data = ohio_df, family = "poisson",
E = pop_at_risk,
control.compute = list(config = TRUE, # To see constraints later
cpo = T,   # For model selection
waic = T), # For model selection
)
time_base = Sys.time()-ptm
#See temporal effect
matplot(basic_model_fit$summary.random$year[22:42, 4:6],
lty=c(2,1,2), type="l", col=1)
#See temporal effect
matplot(basic_model_fit$summary.random$year[22:42, 4:6],
lty=c(2,1,2), type="l", col=1,
xlab = "year", ylab = "Temporal random effect")
#See fitted values for each county w. median, and 0.025%- and 0.975% quantiles
#along with actual values of rate as points
every_county_time_series(basic_model_fit)
source("utilities.R")
#See fitted values for each county w. median, and 0.025%- and 0.975% quantiles
#along with actual values of rate as points
every_county_time_series(basic_model_fit)
source("utilities.R")
#See fitted values for each county w. median, and 0.025%- and 0.975% quantiles
#along with actual values of rate as points
every_county_time_series(basic_model_fit)
warnings()
source("utilities.R")
#See fitted values for each county w. median, and 0.025%- and 0.975% quantiles
#along with actual values of rate as points
every_county_time_series(basic_model_fit)
source("utilities.R")
#See fitted values for each county w. median, and 0.025%- and 0.975% quantiles
#along with actual values of rate as points
every_county_time_series(basic_model_fit)
source("utilities.R")
#See spatial effect plotted as heatmap
plot_spatial_effect(ohio_map, basic_model_fit)
source("utilities.R")
#See spatial effect plotted as heatmap
plot_spatial_effect(ohio_map, basic_model_fit)
basic_model_fit$summary.random$county$sd
source("utilities.R")
#See spatial effect plotted as heatmap
plot_spatial_effect(ohio_map, basic_model_fit)
source("utilities.R")
#See spatial effect plotted as heatmap
plot_spatial_effect(ohio_map, basic_model_fit)
plot(basic_model_fit$summary.fitted.values)
plot(basic_model_fit$summary.fitted.values$[3:5])
plot(basic_model_fit$summary.fitted.values[3:5])
matplot(basic_model_fit$summary.fitted.values[3:5])
matplot(basic_model_fit$summary.fitted.values[4])
par(1)
par(mfrow = c(1, 1))
matplot(basic_model_fit$summary.fitted.values[4])
par(mfrow = c(1, 1))
matplot(basic_model_fit$summary.fitted.values[4],
lty = 1, type = "l", col = 1, xlab = "datum", ylab = "Fitted value")
par(mfrow = c(1, 1))
matplot(basic_model_fit$summary.fitted.values[3:5],
lty = c(1, 1, 1), type = "l", col = 1, xlab = "datum", ylab = "Fitted value")
matplot(basic_model_fit$summary.fitted.values[3:5],
lty = c(1, 1, 1), type = "l", col = 1, xlab = "datum", ylab = "Fitted value")
matplot(basic_model_fit$summary.fitted.values[4],
lty = c(1, 1, 1), type = "l", col = 1, xlab = "datum", ylab = "Fitted value")
plot(1:(n * T), ohio_df$rate, type = "o")
matplot(basic_model_fit$summary.fitted.values[4],
lty = c(1, 1, 1), type = "l", col = 1, xlab = "datum", ylab = "Fitted value")
plot(1:(n * T), ohio_df$rate)
matplot(basic_model_fit$summary.fitted.values[4],
lty = c(1, 1, 1), type = "l", col = 1, xlab = "datum", ylab = "Fitted value")
points(1:(n * T), ohio_df$rate)
matplot(basic_model_fit$summary.fitted.values[4],
lty = c(1, 1, 1), type = "l", col = 1, xlab = "datum", ylab = "Fitted value")
plot(ohio_df$rate)
matplot(basic_model_fit$summary.fitted.values[4],
lty = c(1, 1, 1), type = "l", col = 1, xlab = "datum", ylab = "Fitted value")
plot(ohio_df$rate)
matplot(basic_model_fit$summary.fitted.values[4],
lty = c(1, 1, 1), type = "l", col = 1, xlab = "datum", ylab = "Fitted value")
plot(ohio_df$rate)
plot(ohio_df$rate) +
matplot(basic_model_fit$summary.fitted.values[4],
lty = c(1, 1, 1), type = "l", col = 1, xlab = "datum", ylab = "Fitted value")
plot(ohio_df$rate, col = "red") +
matplot(basic_model_fit$summary.fitted.values[4],
lty = c(1, 1, 1), type = "l", col = 1, xlab = "datum", ylab = "Fitted value")
plot(ohio_df$rate, col = "red") +
lines(basic_model_fit$summary.fitted.values[4],
lty = c(1, 1, 1), type = "l", col = 1, xlab = "datum", ylab = "Fitted value")
plot(ohio_df$rate, col = "red") +
lines(basic_model_fit$summary.fitted.values[4],
lty = "dashed", type = "l", col = 1, xlab = "datum", ylab = "Fitted value")
par(mfrow = c(1, 1))
plot(ohio_df$rate, col = "red",
xlab = "datum", ylab = "Fitted value") +
lines(basic_model_fit$summary.fitted.values[4],
lty = 1, type = "l",
col = 1)
plot(ohio_df$rate,
xlab = "datum", ylab = "Fitted value") +
lines(basic_model_fit$summary.fitted.values[4],
lty = 1, type = "l",
col = 1)
plot(ohio_df$rate,
xlab = "Datum ID", ylab = "Fitted value") +
lines(basic_model_fit$summary.fitted.values[4],
lty = 1, type = "l",
col = 1)
plot(ohio_df$rate,
xlab = "Datum ID", ylab = "Fitted value") +
lines(basic_model_fit$summary.fitted.values[3:5],
lty = 1, type = "l",
col = 1)
plot(ohio_df$rate,
xlab = "Datum ID", ylab = "Fitted value") +
lines(basic_model_fit$summary.fitted.values[4],
lty = 1, type = "l",
col = 1) +
lines(basic_model_fit$summary.fitted.values[3],
lty = 1, type = "l",
col = "red")
plot(ohio_df$rate,
xlab = "Datum ID", ylab = "Fitted value") +
lines(basic_model_fit$summary.fitted.values[4],
lty = 1, type = "l",
col = 1)
#See a lot of things
plot(basic_model_fit)
#See a lot of things
plot(basic_model_fit)
exp(-7.8)
#Plot the intercept
intercept_mean <- basic_model_fit$summary.fixed$mean
intercept_sd <- basic_model_fit$summary.fixed$sd
pnorm()
?pnorm()
tmp <- seq(intercept_mean - 3 * intercept_sd, intercept_mean + 3 * intercept_sd,
length.out = 100)
plot(tmp, dnorm(tmp))
plot(tmp, dnorm(tmp, mean = intercept_mean, sd = intercept_sd))
plot(tmp, dnorm(tmp, mean = intercept_mean, sd = intercept_sd), type = "l")
tmp <- seq(intercept_mean - 4 * intercept_sd, intercept_mean + 4 * intercept_sd,
length.out = 100)
plot(tmp, dnorm(tmp, mean = intercept_mean, sd = intercept_sd), type = "l")
plot(tmp, dnorm(tmp, mean = intercept_mean, sd = intercept_sd), type = "l",
ylab = "", xlab = "")
tmp <- seq(intercept_mean - 4 * intercept_sd, intercept_mean + 4 * intercept_sd,
length.out = 100)
plot(tmp, dnorm(tmp, mean = intercept_mean, sd = intercept_sd), type = "l",
ylab = "", xlab = "", main = "Posterior distribution of Intercept")
#See a lot of things
plot(basic_model_fit)
#See a lot of things
plot(basic_model_fit)
basic_model_fit$summary.hyperpar
basic_model_fit$joint.hyper
basic_model_fit$marginals.fixed$`(Intercept)`
basic_model_fit$residuals$deviance.residuals
basic_model_fit$marginals.hyperpar$`Precision for year (iid component)`
basic_model_fit$marginals.hyperpar$`Precision for year (spatial component)`
basic_model_fit$internal.marginals.hyperpar$`Log precision for year (spatial component)`
basic_model_fit$internal.marginals.hyperpar$`Log precision for year (idd component)`
basic_model_fit$summary.spde2.blc
basic_model_fit$misc$opt.trace$theta
basic_model_fit$summary.hyperpar$mean
basic_model_fit$marginals.hyperpar
basic_model_fit$marginals.hyperpar$`Precision for year (iid component)`[, 1]
plot(basic_model_fit$marginals.hyperpar$`Precision for year (iid component)`[, 1],
basic_model_fit$marginals.hyperpar$`Precision for year (iid component)`[, 2])
plot(basic_model_fit$marginals.hyperpar$`Precision for year (iid component)`[, 1],
basic_model_fit$marginals.hyperpar$`Precision for year (iid component)`[, 2],
type = "l")
plot(basic_model_fit$marginals.hyperpar$`Precision for year (spatial component)`[, 1],
basic_model_fit$marginals.hyperpar$`Precision for year (spatial component)`[, 2],
type = "l")
plot(basic_model_fit$marginals.hyperpar$`Precision for year (spatial component)`[, 1],
basic_model_fit$marginals.hyperpar$`Precision for year (iid component)`[, 2],
type = "l")
plot(basic_model_fit$marginals.hyperpar$`Precision for year (spatial component)`[, 1],
basic_model_fit$marginals.hyperpar$`Precision for year (spatial component)`[, 2],
type = "l")
plot(basic_model_fit$marginals.hyperpar$`Precision for year (spatial component)`[, 1],
basic_model_fit$marginals.hyperpar$`Precision for year (iid component)`[, 2],
type = "l")
#Precision of temporal effects
plot(basic_model_fit$marginals.hyperpar$`Precision for year (spatial component)`[, 1],
basic_model_fit$marginals.hyperpar$`Precision for year (spatial component)`[, 2],
type = "l") +
lines(basic_model_fit$marginals.hyperpar$`Precision for year (spatial component)`[, 1],
basic_model_fit$marginals.hyperpar$`Precision for year (iid component)`[, 2],
type = "l")
#Precision of temporal effects
plot(basic_model_fit$marginals.hyperpar$`Precision for year (spatial component)`[, 1],
basic_model_fit$marginals.hyperpar$`Precision for year (spatial component)`[, 2],
type = "l") +
lines(basic_model_fit$marginals.hyperpar$`Precision for year (spatial component)`[, 1],
basic_model_fit$marginals.hyperpar$`Precision for year (iid component)`[, 2],
type = "l", col = "red")
#Precision of temporal effects
plot(seq(0, 400, length.out = 43),
basic_model_fit$marginals.hyperpar$`Precision for year (spatial component)`[, 2],
type = "l") +
lines(seq(0, 400, length.out = 43),
basic_model_fit$marginals.hyperpar$`Precision for year (iid component)`[, 2],
type = "l", col = "red")
#Precision of temporal effects
plot(seq(0, 630, length.out = 43),
basic_model_fit$marginals.hyperpar$`Precision for year (spatial component)`[, 2],
type = "l") +
lines(seq(0, 630, length.out = 43),
basic_model_fit$marginals.hyperpar$`Precision for year (iid component)`[, 2],
type = "l", col = "red")
plot(basic_model_fit$marginals.hyperpar$`Precision for year (iid component)`[, 1],
basic_model_fit$marginals.hyperpar$`Precision for year (iid component)`[, 2],
type = "l")
par(mfrow = c(2, 2))
#Plot precision of iid temporal effect
plot(basic_model_fit$marginals.hyperpar$`Precision for year (iid component)`[, 1],
basic_model_fit$marginals.hyperpar$`Precision for year (iid component)`[, 2],
type = "l")
#Plot precision of structured temporal effect
plot(basic_model_fit$marginals.hyperpar$`Precision for year (spatial component)`[, 1],
basic_model_fit$marginals.hyperpar$`Precision for year (spatial component)`[, 2],
type = "l")
#Plot precision of iid spatial effect
plot(basic_model_fit$marginals.hyperpar$`Precision for county (iid component)`[, 1],
basic_model_fit$marginals.hyperpar$`Precision for county (iid component)`[, 2],
type = "l")
#Plot precision of structured spatial effect
plot(basic_model_fit$marginals.hyperpar$`Precision for county (spatial component)`[, 1],
basic_model_fit$marginals.hyperpar$`Precision for county (spatial component)`[, 2],
type = "l")
par(mfrow = c(2, 2))
#Plot precision of iid temporal effect
plot(basic_model_fit$marginals.hyperpar$`Precision for year (iid component)`[, 1],
basic_model_fit$marginals.hyperpar$`Precision for year (iid component)`[, 2],
type = "l", xlab = "", ylab = "", main = "Precision of iid temporal effect")
#Plot precision of structured temporal effect
plot(basic_model_fit$marginals.hyperpar$`Precision for year (spatial component)`[, 1],
basic_model_fit$marginals.hyperpar$`Precision for year (spatial component)`[, 2],
type = "l", xlab = "", ylab = "", main = "Precision of structured temporal effect")
#Plot precision of iid spatial effect
plot(basic_model_fit$marginals.hyperpar$`Precision for county (iid component)`[, 1],
basic_model_fit$marginals.hyperpar$`Precision for county (iid component)`[, 2],
type = "l", xlab = "", ylab = "", main = "Precision of iid spatial effect")
#Plot precision of structured spatial effect
plot(basic_model_fit$marginals.hyperpar$`Precision for county (spatial component)`[, 1],
basic_model_fit$marginals.hyperpar$`Precision for county (spatial component)`[, 2],
type = "l", xlab = "", ylab = "", main = "Precision of structured spatial effect")
#See a lot of things
plot(basic_model_fit)
#See a lot of things
plot(basic_model_fit)
source("utilities.R")
#Inference on the basic model
print_cpo_etc(basic_model_fit, time_base)
source("utilities.R")
#Inference on the basic model
print_cpo_etc(basic_model_fit, time_base)
#See a lot of things
plot(basic_model_fit)
basic_model_fit$summary.hyperpar
basic_model_fit$marginals.fixed$`(Intercept)`
source("utilities.R")
plot_intercept(basic_model_fit)
source("utilities.R")
plot_intercept(basic_model_fit)
source("utilities.R")
plot_intercept(basic_model_fit)
source("utilities.R")
plot_precisions_random_effects(basic_model_fit)
source("utilities.R")
#See temporal effect
plot_temporal_effect(basic_model_fit)
source("utilities.R")
#See temporal effect
plot_temporal_effect(basic_model_fit)
#See spatial effect plotted as heatmap
plot_spatial_effect(ohio_map, basic_model_fit)
#See fitted values for each county w. median, and 0.025%- and 0.975% quantiles
#along with actual values of rate as points
every_county_time_series(basic_model_fit)
source("utilities.R")
#Plot the fitted values against the actual observed values
plot_fitted_vs_actual_together(ohio_df, basic_model_fit)
#Update base formula to also contain iid interaction
typeI_formula <- update(base_formula,  ~. + f(space_time_unstructured,
model="iid", #Has to be iid, whole point
hyper = interaction_hyper ))
ptm <- Sys.time()
typeI_fit <- inla(typeI_formula, data = ohio_df, family = 'poisson',
E = pop_at_risk, control.compute = list(config = TRUE,
cpo = TRUE,
waic = TRUE))
time_typeI = Sys.time() - ptm
#Inference on model w. type I interaction
print_cpo_etc(typeI_fit, time_typeI)
#See a lot of things (intercept, precisions, effects, etc)
plot(typeI_fit)
#Plot the intercept
plot_intercept(typeI_fit)
#Plot posterior distributions of precision of random effects
plot_precisions_random_effects(typeI_fit)
#See Structured temporal effect
plot_temporal_effect(typeI_fit)
print("Hello")
