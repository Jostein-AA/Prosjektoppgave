typeII_prec <- scaled_RW_prec %x% diag(n)
typeII_formula <- update(base_formula, ~. + f(space.time,
model = "generic0",
Cmatrix = typeII_prec,
extraconstr = typeII_constraints,
hyper = interaction_hyper))
ptm <- Sys.time()
RW1_ICAR_II_fit <- inla(typeII_formula, data = ohio_df, family = "poisson",
E = pop_at_risk, control.compute = list(config = TRUE,
cpo = TRUE,
waic = TRUE),
verbose = TRUE)
time_RW1_ICAR_II = Sys.time() - ptm
print(c("Type II model fitted in: ", time_RW1_ICAR_II))
plot(RW1_ICAR_II_fit)
print(mean(-log(RW1_ICAR_II_fit$cpo$cpo)))
print(RW1_ICAR_II_fit$misc$configs$constr$nc)
typeIII_constraints <- constraints_maker(type = "III", n = n, t = T)
# get scaled ICAR
scaled_ICAR_prec <- INLA::inla.scale.model(ICAR_prec,
constr = list(A = matrix(1,1,dim(ICAR_prec)[1]), e = 0))
# Kronecker product between IID x ICAR
typeIII_prec <- diag(T) %x% scaled_ICAR_prec
typeIII_formula <- update(base_formula, ~. + f(space.time,
model = "generic0",
Cmatrix = typeIII_prec,
extraconstr = typeIII_constraints,
hyper = interaction_hyper))
ptm <- Sys.time()
RW1_ICAR_III_fit <- inla(typeIII_formula, data = ohio_df, family = "poisson",
E = pop_at_risk, control.compute = list(config = TRUE,
cpo = TRUE,
waic = TRUE),
verbose = TRUE)
time_RW1_ICAR_III = Sys.time() - ptm
print(c("Type III model fitted in: ", time_RW1_ICAR_III))
plot(RW1_ICAR_III_fit)
print(mean(-log(RW1_ICAR_III_fit$cpo$cpo)))
print(RW1_ICAR_III_fit$misc$configs$constr$nc)
typeIV_constraints <- constraints_maker(type = "IV", n = n, t = T)
#Get type IV interaction precision matrix
typeIV_prec <- scaled_RW_prec %x% scaled_ICAR_prec
#Get formula for type IV
typeIV_formula <- update(base_formula, ~. + f(space.time,
model = "generic0",
Cmatrix = typeIV_prec,
extraconstr = typeIV_constraints,
hyper = interaction_hyper))
ptm <- Sys.time()
RW1_ICAR_IV_fit <- inla(typeIV_formula, data = ohio_df, family = "poisson",
E = pop_at_risk, control.compute = list(config = TRUE,
cpo = TRUE,
waic = TRUE),
verbose = TRUE)
time_RW1_ICAR_IV = Sys.time() - ptm
print(c("Type IV model fitted in: ", time_RW1_ICAR_IV))
plot(RW1_ICAR_IV_fit)
print(mean(-log(RW1_ICAR_IV_fit$cpo$cpo)))
print(RW1_ICAR_IV_fit$misc$configs$constr$nc)
#Clear environment
rm(list = ls())
#Load necessary libraries
library(INLA)
library(spData)
library(sf)
library(spdep)
#Load utility functions
source("utilities.R")
#Load data
ohio_df <- read.csv("ohio_df.csv")
ohio_df$year <- ohio_df$year - min(ohio_df$year) + 1
#read the shapefile of ohio
ohio_map  <- read_sf('./fe_2007_39_county')[ ,c("geometry", "NAME")]
ohio_map <- ohio_map[order(ohio_map$NAME), ]
#Get number of counties (n) and number of years (T)
n <- length(unique(ohio_df$county))   # Number of areas
T <- length(unique(ohio_df$year))     # Number of time points
#Get precision matricies for RW2
RW2_prec <- INLA:::inla.rw(n = T, order = 2,
scale.model = TRUE,
sparse = TRUE)
#Extract adjacency structure and create precision matrix for ICAR
nb <- spdep::poly2nb(ohio_map, queen = FALSE)
matrix4inla <- nb2mat(nb, style="B")
mydiag = rowSums(matrix4inla)
matrix4inla <- -matrix4inla
diag(matrix4inla) <- mydiag
ICAR_prec <- Matrix(matrix4inla, sparse = TRUE) #Make it sparse
#Specify hyperparameters with corresponding priors
#Temporal hyperparameters (Precision of iid and precision of RW1) w. corresponding priors: penalized constraint
temporal_hyper = list(prec = list(prior = 'pc.prec',
param = c(1, 0.01)), #Magic numbers
phi = list(prior = 'pc',
param = c(0.5, 0.5)) #Magic numbers
)
#Spatial hyperparameters (Precision of iid and precision of ICAR) w. corresponding priors: penalized constraint
spatial_hyper = list(prec= list(prior = 'pc.prec',
param = c(1, 0.01)), #Magic numbers
phi = list(prior = 'pc',
param = c(0.5, 0.5)) #Magic numbers
)
#Interaction hyperparameter and prior (Precision of interaction)
interaction_hyper = list(theta=list(prior="pc.prec",
param=c(1,0.01)))
scaled_RW_prec <- inla.scale.model(RW2_prec,
list(A = matrix(1, 1, dim(RW2_prec)[1]),
e = 0))
#Get precision matricies for RW2
RW2_prec <- INLA:::inla.rw(n = T, order = 2,
scale.model = TRUE,
sparse = TRUE)
RW2_prec
#Make the base formula
base_formula <- deaths ~ 1 + f(year,
model = 'bym2',
scale.model = T,
constr = T,
#extraconstr = constr.st,
graph = RW2_prec,
hyper = temporal_hyper) +
f(county,
model = 'bym2',
scale.model = T,
constr = T,
graph = ICAR_prec,
hyper = spatial_hyper)
ptm <- Sys.time()
RW2_ICAR_fit <- inla(base_formula, data = ohio_df, family = "poisson",
E = pop_at_risk,
control.compute = list(config = TRUE, # To see constraints later
cpo = T,   # For model selection
waic = T), # For model selection
verbose = TRUE)
time_RW2_ICAR = Sys.time()-ptm
print(c("Basic model fitted in: ", time_RW2_ICAR))
plot(RW2_ICAR_fit)
print(mean(-log(RW2_ICAR_fit$cpo$cpo)))
print(RW2_ICAR_fit$misc$configs$constr$nc)
typeI_formula <- update(base_formula,  ~. + f(space.time,
model="iid", #Has to be iid, whole point
hyper = interaction_hyper ))
ptm <- Sys.time()
RW2_ICAR_I_fit <- inla(typeI_formula, data = ohio_df, family = 'poisson',
E = pop_at_risk, control.compute = list(config = TRUE,
cpo = TRUE,
waic = TRUE),
verbose = TRUE)
time_RW2_ICAR_I = Sys.time() - ptm
print(c("Type I model fitted in: ", time_RW2_ICAR_I))
plot(RW2_ICAR_I_fit)
print(mean(-log(RW2_ICAR_I_fit$cpo$cpo)))
###
#Type II
#Scale precision matrix of RW model so the geometric mean of the marginal variances is one
scaled_RW_prec <- inla.scale.model(RW2_prec,
list(A = matrix(1, 1, dim(RW2_prec)[1]),
e = 0))
#Get precision matric for type II interaction by Kronecker product
typeII_prec <- scaled_RW_prec %x% diag(n)
#Get constraints for type II interaction using a RW2
typeII_constraints = constraints_maker(type = "II", n = n, t = T,
rw = "RW2", prec_matrix = typeII_prec)
typeII_formula <- update(base_formula, ~. + f(space.time,
model = "generic0",
Cmatrix = typeII_prec,
extraconstr = typeII_constraints,
hyper = interaction_hyper))
ptm <- Sys.time()
RW2_ICAR_II_fit <- inla(typeII_formula, data = ohio_df, family = "poisson",
E = pop_at_risk, control.compute = list(config = TRUE,
cpo = TRUE,
waic = TRUE),
verbose = TRUE)
time_RW2_ICAR_II = Sys.time() - ptm
print(c("Type II model fitted in: ", time_RW2_ICAR_II))
plot(RW2_ICAR_II_fit)
print(mean(-log(RW2_ICAR_II_fit$cpo$cpo)))
###
#Type III
# get scaled ICAR
scaled_ICAR_prec <- INLA::inla.scale.model(ICAR_prec,
constr = list(A = matrix(1,1,dim(ICAR_prec)[1]), e = 0))
# Kronecker product between IID x ICAR
typeIII_prec <- diag(T) %x% scaled_ICAR_prec
#Get constraints for the type III interactions
typeIII_constraints <- constraints_maker(type = "III", n = n, t = T,
rw = "RW2", prec_matrix = typeIII_prec)
typeIII_formula <- update(base_formula, ~. + f(space.time,
model = "generic0",
Cmatrix = typeIII_prec,
extraconstr = typeIII_constraints,
hyper = interaction_hyper))
ptm <- Sys.time()
RW2_ICAR_III_fit <- inla(typeIII_formula, data = ohio_df, family = "poisson",
E = pop_at_risk, control.compute = list(config = TRUE,
cpo = TRUE,
waic = TRUE),
verbose = TRUE)
time_RW2_ICAR_III = Sys.time() - ptm
print(c("Type III model fitted in: ", time_RW2_ICAR_III))
plot(RW2_ICAR_III_fit)
print(mean(-log(RW2_ICAR_III_fit$cpo$cpo)))
###
#Type IV
#Get type IV interaction precision matrix
typeIV_prec <- scaled_RW_prec %x% scaled_ICAR_prec
#Get constraints for the type III interactions
typeIV_constraints <- constraints_maker(type = "IV", n = n, t = T,
rw = "RW2", prec_matrix = typeIV_prec)
#Get formula for type IV
typeIV_formula <- update(base_formula, ~. + f(space.time,
model = "generic0",
Cmatrix = typeIV_prec,
extraconstr = typeIV_constraints,
hyper = interaction_hyper))
ptm <- Sys.time()
RW2_ICAR_IV_fit <- inla(typeIV_formula, data = ohio_df, family = "poisson",
E = pop_at_risk, control.compute = list(config = TRUE,
cpo = TRUE,
waic = TRUE),
verbose = TRUE)
time_RW2_ICAR_IV = Sys.time() - ptm
print(c("Type IV model fitted in: ", time_RW2_ICAR_IV))
plot(RW2_ICAR_IV_fit)
print(mean(-log(RW2_ICAR_IV_fit$cpo$cpo)))
print(c("Type I model fitted in: ", time_RW2_ICAR_I))
plot(RW2_ICAR_I_fit)
plot(RW2_ICAR_I_fit)
print(mean(-log(RW2_ICAR_I_fit$cpo$cpo)))
print(c("Type II model fitted in: ", time_RW2_ICAR_II))
plot(RW2_ICAR_II_fit)
print(mean(-log(RW2_ICAR_II_fit$cpo$cpo)))
print(c("Type III model fitted in: ", time_RW2_ICAR_III))
plot(RW2_ICAR_III_fit)
print(mean(-log(RW2_ICAR_III_fit$cpo$cpo)))
#Clear environment
rm(list = ls())
#Load necessary libraries
library(INLA)
library(spData)
library(sf)
library(spdep)
#Load utility functions
source("utilities.R")
#Load data
ohio_df <- read.csv("ohio_df.csv")
ohio_df$year <- ohio_df$year - min(ohio_df$year) + 1
#read the shapefile of ohio
ohio_map  <- read_sf('./fe_2007_39_county')[ ,c("geometry", "NAME")]
ohio_map <- ohio_map[order(ohio_map$NAME), ]
#Get number of counties (n) and number of years (T)
n <- length(unique(ohio_df$county))   # Number of areas
T <- length(unique(ohio_df$year))     # Number of time points
#Get precision matricies for RW1
RW1_prec <- INLA:::inla.rw(n = T, order = 1,
scale.model = TRUE, # set scale.model  = F because we'll scale in the formula
sparse = TRUE)
#Extract adjacency structure and create precision matrix for ICAR
nb <- spdep::poly2nb(ohio_map, queen = FALSE)
#Get precision matricies for RW1
RW1_prec <- INLA:::inla.rw(n = T, order = 1,
scale.model = FALSE,
sparse = TRUE)
#Extract adjacency structure and create precision matrix for ICAR
nb <- spdep::poly2nb(ohio_map, queen = FALSE)
matrix4inla <- nb2mat(nb, style="B")
mydiag = rowSums(matrix4inla)
matrix4inla <- -matrix4inla
diag(matrix4inla) <- mydiag
ICAR_prec <- Matrix(matrix4inla, sparse = TRUE) #Make it sparse
#Specify hyperparameters with corresponding priors
#Temporal hyperparameters (Precision of iid and precision of RW1) w. corresponding priors: penalized constraint
temporal_hyper = list(prec = list(prior = 'pc.prec',
param = c(1, 0.01)), #Magic numbers
phi = list(prior = 'pc',
param = c(0.5, 0.5)) #Magic numbers
)
#Spatial hyperparameters (Precision of iid and precision of ICAR) w. corresponding priors: penalized constraint
spatial_hyper = list(prec= list(prior = 'pc.prec',
param = c(1, 0.01)), #Magic numbers
phi = list(prior = 'pc',
param = c(0.5, 0.5)) #Magic numbers
)
#Interaction hyperparameter and prior (Precision of interaction)
interaction_hyper = list(theta=list(prior="pc.prec",
param=c(1,0.01)))
#Make the base formula
base_formula <- deaths ~ 1 + f(year,
model = 'bym2',
scale.model = T,
constr = T,
graph = RW1_prec,
hyper = temporal_hyper) +
f(county,
model = 'bym2',
scale.model = T,
constr = T,
graph = ICAR_prec,
hyper = spatial_hyper)
#Fit the base formula
ptm <- Sys.time()
RW1_ICAR_fit <- inla(base_formula, data = ohio_df, family = "poisson",
E = pop_at_risk,
control.compute = list(config = TRUE, # To see constraints later
cpo = T,   # For model selection
waic = T), # For model selection
inla.mode = "classic",
verbose = TRUE)
time_RW1_ICAR = Sys.time()-ptm
print(c("Basic model fitted in: ", time_RW1_ICAR))
plot(RW1_ICAR_fit)
print(mean(-log(RW1_ICAR_fit$cpo$cpo)))
print(RW1_ICAR_fit$misc$configs$constr$nc)
#Update base formula to also contain iid interaction
typeI_formula <- update(base_formula,  ~. + f(space.time,
model="iid", #Has to be iid, whole point
hyper = interaction_hyper ))
ptm <- Sys.time()
RW1_ICAR_I_fit <- inla(typeI_formula, data = ohio_df, family = 'poisson',
E = pop_at_risk, control.compute = list(config = TRUE,
cpo = TRUE,
waic = TRUE),
inla.mode = "classic",
verbose = TRUE)
time_RW1_ICAR_I = Sys.time() - ptm
print(c("Type I model fitted in: ", time_RW1_ICAR_I))
plot(RW1_ICAR_I_fit)
print(mean(-log(RW1_ICAR_I_fit$cpo$cpo)))
print(RW1_ICAR_I_fit$misc$configs$constr$nc)
typeII_constraints = constraints_maker(type = "II", n = n, t = T)
#Scale precision matrix of RW model so the geometric mean of the marginal variances is one
scaled_RW_prec <- inla.scale.model(RW1_prec,
list(A = matrix(1, 1, dim(RW1_prec)[1]),
e = 0))
#Get precision matric for type II interaction by Kronecker product
typeII_prec <- scaled_RW_prec %x% diag(n)
typeII_formula <- update(base_formula, ~. + f(space.time,
model = "generic0",
Cmatrix = typeII_prec,
extraconstr = typeII_constraints,
hyper = interaction_hyper))
ptm <- Sys.time()
RW1_ICAR_II_fit <- inla(typeII_formula, data = ohio_df, family = "poisson",
E = pop_at_risk, control.compute = list(config = TRUE,
cpo = TRUE,
waic = TRUE),
inla.mode = "classic",
verbose = TRUE)
#Get sum-to-zero constraints for type II interaction
typeII_constraints = constraints_maker(type = "II", n = n, t = T)
#Scale precision matrix of RW model so the geometric mean of the marginal variances is one
scaled_RW_prec <- inla.scale.model(RW1_prec,
list(A = matrix(1, 1, dim(RW1_prec)[1]),
e = 0))
#Get precision matric for type II interaction by Kronecker product
typeII_prec <- scaled_RW_prec %x% diag(n)
typeII_formula <- update(base_formula, ~. + f(space.time,
model = "generic0",
Cmatrix = typeII_prec,
extraconstr = typeII_constraints,
hyper = interaction_hyper))
ptm <- Sys.time()
RW1_ICAR_II_fit <- inla(typeII_formula, data = ohio_df, family = "poisson",
E = pop_at_risk, control.compute = list(config = TRUE,
cpo = TRUE,
waic = TRUE),
inla.mode = "classic",
verbose = TRUE)
#Get sum-to-zero constraints for type II interaction
typeII_constraints = constraints_maker(type = "II", n = n, t = T)
#Scale precision matrix of RW model so the geometric mean of the marginal variances is one
scaled_RW_prec <- inla.scale.model(RW1_prec,
list(A = matrix(1, 1, dim(RW1_prec)[1]),
e = 0))
#Get precision matric for type II interaction by Kronecker product
typeII_prec <- scaled_RW_prec %x% diag(n)
typeII_formula <- update(base_formula, ~. + f(space.time,
model = "generic0",
Cmatrix = typeII_prec,
extraconstr = typeII_constraints,
hyper = interaction_hyper))
ptm <- Sys.time()
RW1_ICAR_II_fit <- inla(typeII_formula, data = ohio_df, family = "poisson",
E = pop_at_risk, control.compute = list(config = TRUE,
cpo = TRUE,
waic = TRUE),
inla.mode = "classic",
verbose = TRUE)
#########################
load("test_improper_RW1_ICAR_fitted.RData")
plot(test_RW1)
print(mean(-log(test_RW1$cpo$cpo)))
print(mean(-log(test_RW1_I$cpo$cpo)))
print(mean(-log(test_RW1_II$cpo$cpo)))
print(mean(-log(test_RW1_III$cpo$cpo)))
print(mean(-log(test_RW1_IV$cpo$cpo)))
######################
load("test_improper_RW2_ICAR_fitted.RData")
plot(test_RW2)
print(mean(-log(test_RW2$cpo$cpo)))
print(mean(-log(test_RW2_I$cpo$cpo)))
print(mean(-log(test_RW2_II$cpo$cpo)))
print(mean(-log(test_RW2_III$cpo$cpo)))
print(mean(-log(test_RW2_IV$cpo$cpo)))
#Clear environment
rm(list = ls())
#Load necessary libraries
library(INLA)
library(tidyverse)
library(spData)
library(sf)
library(spdep)
library(ggplot2)
library(ggspatial)
library(gridExtra)
library(ggpubr)
library(latex2exp)
library(tables)
#Set working directory
if(getwd() != "C:/Users/joste/Documents/H2023/Code/Prosjektoppgave"){
setwd("H2023/Code/Prosjektoppgave/")
}
source("utilities.R")
#Load in INLA objects
load("improper_RW1_ICAR_fitted.RData"); load("improper_RW2_ICAR_fitted.RData")
load("proper_fitted.RData"); load("one_step_predictions.RData"); load("one_step_predictions_RW2.RData")
source("utilities.R")
source("utilities.R")
plot_temporal_effects(RW1_ICAR_fit,
RW2_ICAR_fit,
proper_base_fit,
T)
source("utilities.R")
plot_temporal_effects(RW1_ICAR_fit,
RW2_ICAR_fit,
proper_base_fit,
T)
source("utilities.R")
plot_temporal_effects(RW1_ICAR_fit,
RW2_ICAR_fit,
proper_base_fit,
T)
RW1_ICAR_fit$summary.hyperpar
RW1_ICAR_fit$summary.hyperpar
source("utilities.R")
plot_temporal_effects(RW1_ICAR_fit,
RW2_ICAR_fit,
proper_base_fit,
T)
plot_temporal_effects(RW1_ICAR_fit,
RW2_ICAR_fit,
proper_full_fit,
T)
plot_temporal_effects(RW1_ICAR_fit,
RW2_ICAR_fit,
proper_base_fit,
T)
source("utilities.R")
plot_temporal_effects(RW1_ICAR_fit,
RW2_ICAR_fit,
proper_base_fit,
proper_full_fit,
T)
source("utilities.R")
plot_temporal_effects(RW1_ICAR_fit,
RW2_ICAR_fit,
proper_base_fit,
T)
#Want to extract county with highest average rate, lowest average,
#the one with largest range, and one random one
max_avg_rate <- mean(ohio_df[ohio_df$county == 1, ]$rate)
id_max_avg_rate <- 1
min_avg_rate <- mean(ohio_df[ohio_df$county == 1, ]$rate)
id_min_avg_rate <- 1
max_range_rate <- max(ohio_df[ohio_df$county == 1, ]$rate) - min(ohio_df[ohio_df$county == 1, ]$rate)
id_max_range_rate <- 1
for(i in 2:n){
county = ohio_df[ohio_df$county == i, ]
curr_avg_rate <- mean(county$rate)
curr_range <- max(county$rate) - min(county$rate)
if(curr_avg_rate > max_avg_rate){
max_avg_rate = curr_avg_rate
id_max_avg_rate = i
}
if(curr_avg_rate < min_avg_rate){
min_avg_rate = curr_avg_rate
id_min_avg_rate = i
}
if(curr_range > max_range_rate){
max_range_rate = curr_range
id_max_range_rate = i
}
}
counties = c(id_max_avg_rate, id_min_avg_rate, id_max_range_rate, 4)
predicted_vs_true_select_counties(base_predicted,
IV_predicted,
proper_interaction_predicted,
pop_in_values_pred_on,
values_predicted_on,
counties)
years_predicted_on <- 12:21
#Extract deaths from years which we predicted on
values_predicted_on <- ohio_df$deaths[ohio_df$year %in% years_predicted_on]
#Extract population in years predicted on
pop_in_values_pred_on <- ohio_df$pop_at_risk[ohio_df$year %in% years_predicted_on]
predicted_vs_true_select_counties(base_predicted,
IV_predicted,
proper_interaction_predicted,
pop_in_values_pred_on,
values_predicted_on,
counties)
inla.doc("ar1")
